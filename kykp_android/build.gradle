apply plugin: 'android'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile files('libs/android-support-v4.jar')
    compile files('libs/httpmime-4.2.4.jar')
    compile files('libs/mail.jar')
    compile files('libs/SocialSDK_QQZone_1.jar')
    compile files('libs/SocialSDK_QQZone_3.jar')
    compile files('libs/SocialSDK_QQZone_2.jar')
    compile files('libs/SocialSDK_Sina.jar')
    compile files('libs/SocialSDK_WeiXin_1.jar')
    compile files('libs/SocialSDK_WeiXin_2.jar')
    compile files('libs/umeng_social_sdk.jar')
    compile files('libs/umeng-analytics-v5.6.1.jar')
    compile files('libs/umeng-analytics-v5.6.1.jar')
    compile files('libs/universalimageloader.jar')
    compile files('libs/jpush-android-2.0.5.jar')
    compile project(':pulltorefreshlibrary')
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES.txt'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/dependencies.txt'
            exclude 'META-INF/LGPL2.1'
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
//    defaultConfig{
////        // dex突破65535的限制
////        multiDexEnabled true
//        // 默认是umeng的渠道
//        manifestPlaceholders = [CHANNEL_VALUE: "h呵呵哒"]
//    }
    productFlavors {
        x1 {
            manifestPlaceholders = [CHANNEL_VALUE: "x1"]
        }
        x2 {
            manifestPlaceholders = [CHANNEL_VALUE: "x2"]
        }
        x3 {
            manifestPlaceholders = [CHANNEL_VALUE: "x3"]
        }
        x4 {
            manifestPlaceholders = [CHANNEL_VALUE: "x4"]
        }
        x5 {
            manifestPlaceholders = [CHANNEL_VALUE: "x5"]
        }
        x6 {
            manifestPlaceholders = [CHANNEL_VALUE: "x6"]
        }
        x7 {
            manifestPlaceholders = [CHANNEL_VALUE: "x7"]
        }
        x8 {
            manifestPlaceholders = [CHANNEL_VALUE: "x8"]
        }
        x9 {
            manifestPlaceholders = [CHANNEL_VALUE: "x9"]
        }
        x10 {
            manifestPlaceholders = [CHANNEL_VALUE: "x10"]
        }
        _360 {
            manifestPlaceholders = [CHANNEL_VALUE: "360手机助手"]
        }
        vmail {
            manifestPlaceholders = [CHANNEL_VALUE: "华为应用市场"]
        }
        lenovo {
            manifestPlaceholders = [CHANNEL_VALUE: "乐商店"]
        }
    }
//    signingConfigs {
//        debug {
//            // No debug config
//        }
//
//        release {
//            storeFile file("kpky.key")
//            storePassword "KPKY_wu&yue_85"
//            keyAlias "kpky"
//            keyPassword "KPKY_wu&yue_85"
//        }
//    }
//    buildTypes {
//        debug {
//            // 显示Log
//            buildConfigField "boolean", "LOG_DEBUG", "true"
//            minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false
//            signingConfig signingConfigs.debug
//        }
//        release {
//            // 不显示Log
//            buildConfigField "boolean", "LOG_DEBUG", "false"
//            minifyEnabled true
//            zipAlignEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk
////                        def fileName = "kpky_${releaseTime()}_${variant.productFlavors[0].name}.apk"
//                        def fileName = "kpky_${variant.productFlavors[0].name}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
//        }
//    }
    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
        destinationDir file("$projectDir/libs")
        baseName "Native_Libs2"
        extension "jar"
        from fileTree(dir: "libs", include: "**/*.so")
        into "lib"
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(nativeLibsToJar)
    }
}

